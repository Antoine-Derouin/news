import db.Link;
import java.time.OffsetDateTime;
import kotlin.collections.List;

--    atomEntry =
--       element atom:entry {
--          atomCommonAttributes,
--          (atomAuthor*
--           & atomCategory*
--           & atomContent?
--           & atomContributor*
--           & atomId
--           & atomLink*
--           & atomPublished?
--           & atomRights?
--           & atomSource?
--           & atomSummary?
--           & atomTitle
--           & atomUpdated
--           & extensionElement*)
--       }
CREATE TABLE Entry (
    contentType TEXT,
    contentSrc TEXT,
    contentText TEXT,
    links TEXT AS List<Link> NOT NULL,
    summary TEXT,
    id TEXT PRIMARY KEY NOT NULL,
    feedId TEXT NOT NULL,
    title TEXT NOT NULL,
    published TEXT AS OffsetDateTime NOT NULL,
    updated TEXT AS OffsetDateTime NOT NULL,
    authorName TEXT NOT NULL,

    read INTEGER AS Boolean NOT NULL,
    readSynced INTEGER AS Boolean NOT NULL,

    bookmarked INTEGER AS Boolean NOT NULL,
    bookmarkedSynced INTEGER AS Boolean NOT NULL,

    guidHash TEXT NOT NULL,
    commentsUrl TEXT NOT NULL,

    ogImageChecked INTEGER AS Boolean NOT NULL,
    ogImageUrl TEXT NOT NULL,
    ogImageWidth INTEGER NOT NULL,
    ogImageHeight INTEGER NOT NULL
);

CREATE VIEW EntryWithoutContent
AS
SELECT
    links,
    summary,
    id,
    feedId,
    title,
    published,
    updated,
    authorName,

    read,
    readSynced,

    bookmarked,
    bookmarkedSynced,

    guidHash,
    commentsUrl,

    ogImageChecked,
    ogImageUrl,
    ogImageWidth,
    ogImageHeight
FROM Entry;

insertOrReplace:
INSERT OR REPLACE
INTO Entry(contentType, contentSrc, contentText, links, summary, id, feedId, title, published, updated, authorName, read, readSynced, bookmarked, bookmarkedSynced, guidHash, commentsUrl, ogImageChecked, ogImageUrl, ogImageWidth, ogImageHeight)
VALUES ?;

selectAll:
SELECT *
FROM EntryWithoutContent
ORDER BY published DESC;

selectById:
SELECT *
FROM Entry
WHERE id = ?;

selectByFeedId:
SELECT *
FROM EntryWithoutContent
WHERE feedId = ?;

selectByFeedIdAndReadAndBookmarked:
SELECT e.id, f.showPreviewImages, e.ogImageUrl, e.ogImageWidth, e.ogImageHeight, e.title, f.title AS feedTitle, e.published, e.summary, e.read, f.openEntriesInBrowser, e.links
FROM Entry e
JOIN Feed f
ON f.id = e.feedId
WHERE e.feedId = ?
AND e.read IN ?
AND e.bookmarked = ?
ORDER BY e.published DESC;

selectByReadAndBookmarked:
SELECT e.id, f.showPreviewImages, e.ogImageUrl, e.ogImageWidth, e.ogImageHeight, e.title, f.title AS feedTitle, e.published, e.summary, e.read, f.openEntriesInBrowser, e.links
FROM Entry e
JOIN Feed f
ON f.id = e.feedId
AND e.read IN ?
AND e.bookmarked = ?
ORDER BY e.published DESC;

selectByReadOrBookmarked:
SELECT *
FROM EntryWithoutContent
WHERE read = ? OR bookmarked = ?
ORDER BY published DESC;

selectByRead:
SELECT *
FROM EntryWithoutContent
WHERE read = ?
ORDER BY published DESC;

selectByReadSynced:
SELECT *
FROM EntryWithoutContent
WHERE readSynced = ?
ORDER BY published DESC;

selectByBookmarked:
SELECT *
FROM EntryWithoutContent
WHERE bookmarked = ?
ORDER BY published DESC;

selectByBookmarkedSynced:
SELECT *
FROM EntryWithoutContent
WHERE bookmarkedSynced = ?
ORDER BY published DESC;

selectByQuery:
SELECT *
FROM Entry
WHERE UPPER(title) LIKE '%' || UPPER(:query) || '%'
OR UPPER(contentText) LIKE '%' || UPPER(:query) || '%'
ORDER BY published DESC;

selectByQueryAndBookmarked:
SELECT *
FROM Entry
WHERE bookmarked = :bookmarked
AND (UPPER(title) LIKE '%' || UPPER(:query) || '%'OR UPPER(contentText) LIKE '%' || UPPER(:query) || '%')
ORDER BY published DESC;

selectByQueryAndFeedId:
SELECT *
FROM Entry
WHERE feedId = :feedId
AND (UPPER(title) LIKE '%' || UPPER(:query) || '%'OR UPPER(contentText) LIKE '%' || UPPER(:query) || '%')
ORDER BY published DESC;

selectByOgImageChecked:
SELECT *
FROM EntryWithoutContent
WHERE ogImageChecked = :ogImageChecked
ORDER BY published DESC
LIMIT :limit;

selectLinks:
SELECT links
FROM Entry;

selectCount:
SELECT COUNT(*)
FROM Entry;

selectMaxId:
SELECT MAX(id + 0) FROM Entry;

selectMaxUpdaded:
SELECT MAX(updated)
FROM Entry;

updateReadByFeedId:
UPDATE Entry
SET read = :read, readSynced = 0
WHERE read != :read AND feedId = :feedId;

updateReadByBookmarked:
UPDATE Entry
SET read = :read, readSynced = 0
WHERE read != :read AND bookmarked = :bookmarked;

updateReadAndReadSynced:
UPDATE Entry
SET read = ?, readSynced = ?
WHERE id = ?;

updateReadSynced:
UPDATE Entry
SET readSynced = ?
WHERE id = ?;

updateBookmarkedAndBookmaredSynced:
UPDATE Entry
SET bookmarked = ?, bookmarkedSynced = ?
WHERE id = ?;

updateBookmarkedSynced:
UPDATE Entry
SET bookmarkedSynced = ?
WHERE id = ?;

updateOgImageChecked:
UPDATE Entry
SET ogImageChecked = ?
WHERE id = ?;

updateOgImage:
UPDATE Entry
SET ogImageUrl = ?, ogImageWidth = ?, ogImageHeight = ?, ogImageChecked = 1
WHERE id = ?;

updateLinks:
UPDATE Entry
SET links = ?
WHERE id = ?;

deleteAll:
DELETE
FROM Entry;

deleteByFeedId:
DELETE
FROM Entry
WHERE feedId = ?;
